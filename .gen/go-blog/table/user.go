//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var User = newUserTable("go-blog", "user", "")

type userTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	Username   mysql.ColumnString
	Email      mysql.ColumnString
	Phone      mysql.ColumnString
	DivisionID mysql.ColumnInteger
	Password   mysql.ColumnString
	IsDeleted  mysql.ColumnBool
	CreatedAt  mysql.ColumnTimestamp
	UpdatedAt  mysql.ColumnTimestamp
	DeletedAt  mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UserTable struct {
	userTable

	NEW userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		NEW:       newUserTableImpl("", "new", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		UsernameColumn   = mysql.StringColumn("username")
		EmailColumn      = mysql.StringColumn("email")
		PhoneColumn      = mysql.StringColumn("phone")
		DivisionIDColumn = mysql.IntegerColumn("division_id")
		PasswordColumn   = mysql.StringColumn("password")
		IsDeletedColumn  = mysql.BoolColumn("is_deleted")
		CreatedAtColumn  = mysql.TimestampColumn("created_at")
		UpdatedAtColumn  = mysql.TimestampColumn("updated_at")
		DeletedAtColumn  = mysql.TimestampColumn("deleted_at")
		allColumns       = mysql.ColumnList{IDColumn, UsernameColumn, EmailColumn, PhoneColumn, DivisionIDColumn, PasswordColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns   = mysql.ColumnList{UsernameColumn, EmailColumn, PhoneColumn, DivisionIDColumn, PasswordColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return userTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Username:   UsernameColumn,
		Email:      EmailColumn,
		Phone:      PhoneColumn,
		DivisionID: DivisionIDColumn,
		Password:   PasswordColumn,
		IsDeleted:  IsDeletedColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
